Subsample only supports subsampling by integer which requires large image to subsample an image more gradually.

Since the implementation goal is to have no more than 1 MB in size for entire project, it is needed to look for thirdparty image resizing library like PIL.

Or suffer the cost of 10MB PNG image and use subsampling method provided by tkinter PhotoImage.

Most likely the users will not be happy to provide way larger images as background images than originals they would download from internet or create.

It also makes it not very logical to ask user for better resolution image just because the native tkinter resizing method (subsampling) does not support fractional subsampling.

Dependency on Third party might be inevitable unless a simple and concise algorithm is found or resizing image.

Even if the resizing algorithm is found, it would need to support various media types which would extend to a larger project anyways.

Not to mention that PhotoImage subsampling is only for Images and Video background would need different approach.

Even if subsampling was applied, the background image will never match screen size correctly.

The external libraries that manage image resizing might come with high accuracy leading to a need of optimization when applying background-resize depending on window size.

Manual pre-resized images method without subsampling or third party library, transering burden to the user:
A less covenient way would be to create a folder "background" and place inside it many pre-resized background of different resolutions: background_1920x1080.png background_1280x720.png 

I tried to come up with background_bilinear_interpolation_resize.py, but it was too slow and best if Operating System kernel would implement this routine.
Implementing an efficient algorithm (e.g., bilinear interpolation) in pure Python can be too slow for practical use.